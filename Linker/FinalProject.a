;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 05-Feb-2017
;Author  : Skywilhur
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 16
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0050 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0051 char status,data;
; 0000 0052 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0053 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0054 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0055    {
; 0000 0056    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0057 #if RX_BUFFER_SIZE == 256
; 0000 0058    // special case for receiver buffer size=256
; 0000 0059    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 005A #else
; 0000 005B    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 005C    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 005D       {
; 0000 005E       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 005F       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0060       }
; 0000 0061 #endif
; 0000 0062    }
;PCODE: $0000002A VOL: 0
; 0000 0063 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 006A {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 006B char data;
; 0000 006C while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 006D data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006E #if RX_BUFFER_SIZE != 256
; 0000 006F if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0070 #endif
; 0000 0071 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0072 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 0073 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0074 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0075 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 16
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0085 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0086 if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0087    {
; 0000 0088    --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 0089    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 008A #if TX_BUFFER_SIZE != 256
; 0000 008B    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008C #endif
; 0000 008D    }
;PCODE: $0000005A VOL: 0
; 0000 008E }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0095 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0096 while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000061 VOL: 0
;	c -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0097 #asm("cli")
;PCODE: $00000068 VOL: 0
	cli
;PCODE: $00000069 VOL: 0
; 0000 0098 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0099    {
; 0000 009A    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 009B #if TX_BUFFER_SIZE != 256
; 0000 009C    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009D #endif
; 0000 009E    ++tx_counter;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 009F    }
; 0000 00A0 else
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A1    UDR=c;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A2 #asm("sei")
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
	sei
;PCODE: $00000083 VOL: 0
; 0000 00A3 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define FIRST_ADC_INPUT 0
;#define LAST_ADC_INPUT 7
;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;#define ADC_VREF_TYPE 0x00
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 00B2 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B3 static unsigned char input_index=0;
; 0000 00B4 // Read the AD conversion result
; 0000 00B5 adc_data[input_index]=ADCW;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00B6 // Select next ADC input
; 0000 00B7 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00B8    input_index=0;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00B9 ADMUX=(FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff))+input_index;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00BA // Delay needed for the stabilization of the ADC input voltage
; 0000 00BB delay_us(10);
;PCODE: $0000009A VOL: 0
; 0000 00BC // Start the AD conversion
; 0000 00BD ADCSRA|=0x40;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00BE }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;
;// Functions
;
;    // ADC USART Log
;void WriteUART1dec2string(unsigned int data)
; 0000 00C4 {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00C5     unsigned char temp;
; 0000 00C6 
; 0000 00C7     temp=data/1000;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;	data -> Y+1
;	temp -> R17
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00C8     putchar(temp+'0');
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C9     data=data-temp*1000;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00CA     temp=data/100;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00CB     putchar(temp+'0');
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00CC     data=data-temp*100;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00CD     temp=data/10;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00CE     putchar(temp+'0');
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00CF     data=data-temp*10;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00D0     putchar(temp+'0');
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00D1 }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;
;    // Activate PWM on PB3 diode
;    void alarm(int status)
; 0000 00D5     {
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00D6         if(status == 1)
;PCODE: $000000D4 VOL: 0
;	status -> Y+0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00D7         {
; 0000 00D8             OCR2=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00D9             OCR2=0x63;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00DA         }
; 0000 00DB         else
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00DC         {
; 0000 00DD             OCR2=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00DE         }
;PCODE: $000000E0 VOL: 0
; 0000 00DF     }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;
;    // Print out locked status on LCD
;    void printLCDStatusLocked()
; 0000 00E3     {
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00E4         lcd_gotoxy(0,0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00E5         lcd_puts("SYSTEM LOCKED");
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00E6         delay_ms(500);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00E7         lcd_clear();
;PCODE: $000000EF VOL: 0
; 0000 00E8     }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0

	.DSEG
_0x17:
	.BYTE 0xE
;
;    // Print out unlocked status on LCD
;     void printLCDStatusUnlocked()
; 0000 00EC     {

	.CSEG
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00ED         lcd_gotoxy(0,0);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00EE         lcd_puts("SYSTEM UNLOCKED");
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00EF         delay_ms(500);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00F0         lcd_clear();
;PCODE: $000000FD VOL: 0
; 0000 00F1     }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0

	.DSEG
_0x18:
	.BYTE 0x10
;
;// Declare your global variables here
;// Check pin value
;int value = 0;
;// Counts how many buttons were pressed
;int counter = 0;
;int ADC_Pin_Switch = 0;
;
;// Check if system is active, init state is inactive
;int systemActive = 0;
;
;// Set alarm on
;int alarmOn = 1;
;// Set alarm off
;int alarmOff = 0;
;
;// Check if correct password is entered, init state is false
;int passwordFlag = 0;
;
;
;void main(void)
; 0000 0107 {

	.CSEG
;PCODE: $00000100 VOL: 0
; 0000 0108 // Declare your local variables here
; 0000 0109 
; 0000 010A // Input/Output Ports initialization
; 0000 010B // Port A initialization
; 0000 010C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 010D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 010E PORTA=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 010F DDRA=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0110 
; 0000 0111 // Port B initialization
; 0000 0112 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0113 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0114 PORTB=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0115 DDRB=0x00; //0x08
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0116 
; 0000 0117 // Port C initialization
; 0000 0118 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0119 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 011A PORTC=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 011B DDRC=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 011C 
; 0000 011D // Port D initialization
; 0000 011E // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 011F // State7=0 State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0120 PORTD=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0121 DDRD=0x80;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0122 //DDRD=0xB0;
; 0000 0123 
; 0000 0124 
; 0000 0125 // Timer/Counter 0 initialization
; 0000 0126 // Clock source: System Clock
; 0000 0127 // Clock value: Timer 0 Stopped
; 0000 0128 // Mode: Normal top=0xFF
; 0000 0129 // OC0 output: Disconnected
; 0000 012A //TCCR0=0x63;//6B; 63 true value
; 0000 012B //TCNT0=0x00;
; 0000 012C //OCR0=0x7F;
; 0000 012D 
; 0000 012E TCCR0=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 012F TCNT0=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0130 OCR0=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0131 
; 0000 0132 
; 0000 0133 // Timer/Counter 1 initialization
; 0000 0134 // Clock source: System Clock
; 0000 0135 // Clock value: Timer1 Stopped
; 0000 0136 // Mode: Normal top=0xFFFF
; 0000 0137 // OC1A output: Discon.
; 0000 0138 // OC1B output: Discon.
; 0000 0139 // Noise Canceler: Off
; 0000 013A // Input Capture on Falling Edge
; 0000 013B // Timer1 Overflow Interrupt: Off
; 0000 013C // Input Capture Interrupt: Off
; 0000 013D // Compare A Match Interrupt: Off
; 0000 013E // Compare B Match Interrupt: Off
; 0000 013F TCCR1A=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0140 TCCR1B=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0141 TCNT1H=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0142 TCNT1L=0x00;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0143 ICR1H=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0144 ICR1L=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0145 OCR1AH=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0146 OCR1AL=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0147 OCR1BH=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0148 OCR1BL=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0149 
; 0000 014A // Timer/Counter 2 initialization
; 0000 014B // Clock source: System Clock
; 0000 014C // Clock value: 125.000 kHz
; 0000 014D // Mode: Fast PWM top=0xFF
; 0000 014E // OC2 output: Non-Inverted PWM
; 0000 014F ASSR=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0150 TCCR2=0x67; //0x6C
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0151 TCNT2=0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0152 //OCR2=0x00; //0x07
; 0000 0153 
; 0000 0154 // External Interrupt(s) initialization
; 0000 0155 // INT0: Off
; 0000 0156 // INT1: Off
; 0000 0157 // INT2: Off
; 0000 0158 MCUCR=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0159 MCUCSR=0x00;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 015A 
; 0000 015B // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 015C TIMSK=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 015D 
; 0000 015E // USART initialization
; 0000 015F // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0160 // USART Receiver: On
; 0000 0161 // USART Transmitter: On
; 0000 0162 // USART Mode: Asynchronous
; 0000 0163 // USART Baud Rate: 76800
; 0000 0164 UCSRA=0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0165 UCSRB=0xD8;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0166 UCSRC=0x86; //0x06
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0167 UBRRH=0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0168 UBRRL=0x0C; //0x06
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0169 
; 0000 016A // Analog Comparator initialization
; 0000 016B // Analog Comparator: Off
; 0000 016C // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 016D ACSR=0x80;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 016E SFIOR=0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 016F 
; 0000 0170 // ADC initialization
; 0000 0171 // ADC Clock frequency: 1000.000 kHz
; 0000 0172 // ADC Voltage Reference: AREF pin
; 0000 0173 ADMUX=FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0174 ADCSRA=0xCB;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0175 
; 0000 0176 // SPI initialization
; 0000 0177 // SPI disabled
; 0000 0178 SPCR=0x00;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0179 
; 0000 017A // TWI initialization
; 0000 017B // TWI disabled
; 0000 017C TWCR=0x00;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 017D 
; 0000 017E // Alphanumeric LCD initialization
; 0000 017F // Connections are specified in the
; 0000 0180 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0181 // RS - PORTA Bit 2
; 0000 0182 // RD - PORTA Bit 1
; 0000 0183 // EN - PORTD Bit 6
; 0000 0184 // D4 - PORTC Bit 4
; 0000 0185 // D5 - PORTC Bit 5
; 0000 0186 // D6 - PORTC Bit 6
; 0000 0187 // D7 - PORTC Bit 7
; 0000 0188 // Characters/line: 16
; 0000 0189 lcd_init(16);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 018A 
; 0000 018B // Global enable interrupts
; 0000 018C #asm("sei")
;PCODE: $0000014F VOL: 0
	sei
;PCODE: $00000150 VOL: 0
; 0000 018D 
; 0000 018E while (1)
;PCODE: $00000151 VOL: 0
; 0000 018F       {
; 0000 0190       // Place your code here
; 0000 0191       // Password flow
; 0000 0192 
; 0000 0193 
; 0000 0194       // Read the pin register, write to port register
; 0000 0195 
; 0000 0196       if(PINC.0 && (1<<PORTC.0))
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0197       {
; 0000 0198         delay_ms(50);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0199         systemActive = 1; // System activated
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 019A         passwordFlag = 0; // Correct password not entered
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 019B         printf("\tLOG: System locked.");
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 019C 
; 0000 019D         // LCD Output
; 0000 019E         printLCDStatusLocked();
;PCODE: $0000016D VOL: 0
; 0000 019F       }
; 0000 01A0 
; 0000 01A1       if(systemActive == 1)
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 01A2       {
; 0000 01A3         if(PINB.1 &&(1<<PORTB.1))
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 01A4         {
; 0000 01A5             delay_ms(50);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 01A6             counter++;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 01A7             if(value == 0) value = 1;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 01A8         }
;PCODE: $00000189 VOL: 0
; 0000 01A9 
; 0000 01AA         // Cause of password flow, 7 is here
; 0000 01AB         if(PINB.7 &&(1<<PORTB.7))
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 01AC         {
; 0000 01AD             delay_ms(50);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 01AE             counter++;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 01AF             if(value == 1) value = 2;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 01B0         }
;PCODE: $000001A3 VOL: 0
; 0000 01B1 
; 0000 01B2         // Cause of password flow, 3 is here
; 0000 01B3         if(PINB.3 &&(1<<PORTB.3))
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 01B4         {
; 0000 01B5             delay_ms(50);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 01B6             counter++;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 01B7             if(value == 2) value = 3;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 01B8         }
;PCODE: $000001BD VOL: 0
; 0000 01B9 
; 0000 01BA         // Cause of password flow, 5 is here
; 0000 01BB         if(PINB.5 && (1<<PORTB.5))
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 01BC         {
; 0000 01BD             delay_ms(50);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 01BE             counter++;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 01BF             if(value == 3) value = 4;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 01C0         }
;PCODE: $000001D7 VOL: 0
; 0000 01C1 
; 0000 01C2         if(PINB.0 &&(1<<PORTB.0))
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 01C3         {
; 0000 01C4             delay_ms(50);
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 01C5             counter++;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 01C6         }
; 0000 01C7 
; 0000 01C8         if(PINB.2 &&(1<<PORTB.2))
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 01C9         {
; 0000 01CA             delay_ms(50);
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 01CB             counter++;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 01CC         }
; 0000 01CD 
; 0000 01CE         if(PINB.4 &&(1<<PORTB.4))
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 01CF         {
; 0000 01D0             delay_ms(50);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 01D1             counter++;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 01D2         }
; 0000 01D3 
; 0000 01D4         if(PINB.6 &&(1<<PORTB.6))
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 01D5         {
; 0000 01D6             delay_ms(50);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 01D7             counter++;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 01D8         }
; 0000 01D9 
; 0000 01DA         //Unlock signal. System inactive
; 0000 01DB         if(counter == 4 && value == 4)
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01DC         {
; 0000 01DD            printf("\tLOG: Alarm deactivated!");
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 01DE             //Disable alarm
; 0000 01DF             alarm(alarmOff);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 01E0 
; 0000 01E1             // Correct password entered
; 0000 01E2             passwordFlag = 1;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 01E3 
; 0000 01E4             value = 0;
;PCODE: $0000023E VOL: 0
; 0000 01E5             counter = 0;
;PCODE: $0000023F VOL: 0
; 0000 01E6 
; 0000 01E7             // System deactivated
; 0000 01E8             systemActive = 0;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 01E9 
; 0000 01EA             // LCD output
; 0000 01EB             printLCDStatusUnlocked();
;PCODE: $00000242 VOL: 0
; 0000 01EC         }
; 0000 01ED 
; 0000 01EE         //Warning>Wrong password
; 0000 01EF         else if (counter == 4 && value != 4)
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 01F0         {
; 0000 01F1             printf("\tLOG: Alarm activated!");
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 01F2             alarm(alarmOn);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 01F3 
; 0000 01F4             value = 0;
;PCODE: $00000258 VOL: 0
; 0000 01F5             counter = 0;
;PCODE: $00000259 VOL: 0
; 0000 01F6 
; 0000 01F7             // LCD output
; 0000 01F8             printLCDStatusLocked();
;PCODE: $0000025A VOL: 0
; 0000 01F9         }
; 0000 01FA 
; 0000 01FB       // System breakin
; 0000 01FC        else if((adc_data[5] >= 450) && passwordFlag == 0)
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 01FD         {
; 0000 01FE             alarm(alarmOn);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 01FF             printf("\tLOG: System breakin!");
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0200         }
; 0000 0201 
; 0000 0202      }
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0203 
; 0000 0204      else if(systemActive == 0)
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0205      {
; 0000 0206         alarm(alarmOff);
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0207          printLCDStatusUnlocked();
;PCODE: $0000027B VOL: 0
; 0000 0208      }
; 0000 0209 
; 0000 020A    }
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 020B }
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
